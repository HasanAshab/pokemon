import aiohttp
import asyncio
import json

# URLs for PokeAPI
urls = {
    "moves": "https://pokeapi.co/api/v2/move",
    "pokemons": "https://pokeapi.co/api/v2/pokemon",
    "types": "https://pokeapi.co/api/v2/type",
}

# Dictionary to hold the fetched data
db_data = {}
CONCURRENT_LIMIT = 30  # Limit for simultaneous requests


def get_types(pokemon):
    return [ptype["type"]["name"] for ptype in pokemon["types"]]


def get_stats(pokemon):
    return {stat["stat"]["name"]: stat["base_stat"] for stat in pokemon["stats"]}


def get_effects(move):
    if len(move["effect_entries"]) == 0:
        return []
    effect_text = move["effect_entries"][0]["short_effect"].lower()
    possible_effects = [
        "burn",
        "paralyze",
        "freeze",
        "poison",
        "badly",
        "sleep",
        "confuse",
        "flinch",
    ]
    return [effect for effect in possible_effects if effect in effect_text]


def calculate_retreat(move):
    retreats = [0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6]
    thresholds = [20, 50, 70, 110, 130, 150, 170, 190, 210, 230, 250, 250]
    power = move["power"]
    if power is None:
        return retreats[2]
    for i, threshold in enumerate(thresholds):
        if power <= threshold:
            return retreats[i]
    return retreats[-1]


def serialize_type(data):
    type_effectiveness = {}
    for relation, multiplier in [
        ("double_damage_to", 1.2),
        ("half_damage_to", 0.7),
        ("no_damage_to", 0.3),
    ]:
        for type_entry in data["damage_relations"][relation]:
            type_name = type_entry["name"]
            type_effectiveness[type_name] = multiplier
    return type_effectiveness


def serialize_move(data):
    return {
        "meta": data["meta"],
        "power": data["power"],
        "accuracy": data["accuracy"],
        "pp": round(data["pp"] / 3),
        "damage_class": data["damage_class"]["name"],
        "type": data["type"]["name"],
        "effect_chance": data.get("effect_chance"),
        "effect_names": get_effects(data),
        "retreat": calculate_retreat(data),
    }


def serialize_pokemon(data):
    return {
        "types": get_types(data),
        **get_stats(data),
    }


async def fetch_item(url, session, semaphore):
    async with semaphore:
        async with session.get(url) as response:
            response.raise_for_status()
            return await response.json()


async def fetch_types(session):
    types = {}
    async with session.get(f"{urls['types']}?limit=100000") as response:
        response.raise_for_status()
        data = await response.json()
    semaphore = asyncio.Semaphore(CONCURRENT_LIMIT)
    tasks = [
        asyncio.create_task(fetch_item(ptype["url"], session, semaphore))
        for ptype in data["results"]
    ]
    for ptype, type_data in zip(data["results"], await asyncio.gather(*tasks)):
        types[ptype["name"]] = serialize_type(type_data)
    return types


async def fetch_moves(session):
    moves = {}
    async with session.get(f"{urls['moves']}?limit=100000") as response:
        response.raise_for_status()
        data = await response.json()
    semaphore = asyncio.Semaphore(CONCURRENT_LIMIT)
    tasks = [
        asyncio.create_task(fetch_item(move["url"], session, semaphore))
        for move in data["results"]
    ]
    for move, move_data in zip(data["results"], await asyncio.gather(*tasks)):
        moves[move["name"]] = serialize_move(move_data)
    return moves


async def fetch_pokemons(session):
    pokemons = {}
    async with session.get(f"{urls['pokemons']}?limit=100000") as response:
        response.raise_for_status()
        data = await response.json()
    semaphore = asyncio.Semaphore(CONCURRENT_LIMIT)
    tasks = [
        asyncio.create_task(fetch_item(pokemon["url"], session, semaphore))
        for pokemon in data["results"]
    ]
    for pokemon, pokemon_data in zip(data["results"], await asyncio.gather(*tasks)):
        pokemons[pokemon["name"]] = serialize_pokemon(pokemon_data)
    return pokemons


async def main():
    async with aiohttp.ClientSession() as session:
        print("Fetching types...")
        db_data["types"] = await fetch_types(session)
        print("Fetched!")
        print("Fetching moves...")
        db_data["moves"] = await fetch_moves(session)
        print("Fetched!")
        print("Fetching pokemons...")
        db_data["pokemons"] = await fetch_pokemons(session)
        print("Fetched!")
        print("Done!")
    # Save the data to db.json
    with open("assets/db.json", "w") as file:
        json.dump(db_data, file, indent=1)

    print("Data has been successfully saved to db.json.")


# Run the main function
asyncio.run(main())
